{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","countries","setCountries","useEffect","a","fetch","then","response","json","data","map","country","name","capital","flag","region","subregion","population","borders","languages","getCountriesData","refreshCountryData","className","alt","src","Button","variant","color","onChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPA6FeA,MAtFf,WAEE,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,mBAAS,eAAvC,6BAEAG,qBAAU,YAEc,uCAAG,sBAAAC,EAAA,sEACjBC,MAAM,gDACXC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAMR,EAAYQ,EAAKC,KAAI,SAACC,GAAD,MACzB,CACEC,KAAMD,EAAQC,KACdC,QAASF,EAAQE,QACjBC,KAAMH,EAAQG,KACdC,OAAQJ,EAAQI,OAChBC,UAAWL,EAAQK,UACnBC,WAAYN,EAAQM,WACpBC,QAASP,EAAQO,QACjBC,UAAWR,EAAQQ,cAIrBjB,EAAaD,MAjBM,2CAAH,qDAoBtBmB,KACC,IAEH,IAAMC,EAAkB,uCAAG,sBAAAjB,EAAA,sEACnBC,MAAM,gDACXC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAMR,EAAYQ,EAAKC,KAAI,SAACC,GAAD,MACzB,CACEC,KAAMD,EAAQC,KACdC,QAASF,EAAQE,QACjBC,KAAMH,EAAQG,KACdC,OAAQJ,EAAQI,OAChBC,UAAWL,EAAQK,UACnBC,WAAYN,EAAQM,WACpBC,QAASP,EAAQO,QACjBC,UAAWR,EAAQQ,cAErBjB,EAAaD,MAfQ,2CAAH,qDAkBxB,OACE,sBAAKqB,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,SAEQrB,EAAUS,KAAI,SAACC,GAAD,OAEV,sBAAKW,UAAU,yBAAf,UACE,qBAAKA,UAAU,wBAAf,SACC,qBAAKA,UAAU,cAAeC,IAAKZ,EAAQG,KAAMU,IAAKb,EAAQG,SAE/D,sBAAKQ,UAAU,yBAAf,UACE,oBAAIA,UAAU,OAAd,SAAsBX,EAAQC,OAE9B,4BAAI,eAAiBD,EAAQM,aAC7B,4BAAI,WAAaN,EAAQI,SACzB,4BAAI,cAAgBJ,EAAQK,YAC5B,4BAAI,YAAcL,EAAQE,UAC1B,4BAAI,eAAiBF,EAAQM,aAC7B,4BAAI,cAAeN,EAAQQ,UAAUT,KAAI,SAAAD,GAAI,MAC1C,IAAMA,EAAKG,UAGf,4BAAI,YAAcD,EAAQO,qBAOzC,qBAAKI,UAAU,aAAf,SACA,cAACG,EAAA,EAAD,CAASC,QAAQ,YAAYC,MAAM,UAAUC,SAAUP,EAAvD,wBCzESQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e1bd98bd.chunk.js","sourcesContent":["\nimport './App.css';\nimport React ,{useEffect, useState}from 'react';\nimport {\n  Button\n} from \"@material-ui/core\";\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setcountry] = useState('Asia Region')\n\n  useEffect(() =>{\n   \n    const getCountriesData = async () =>{\n      await fetch(\"https://restcountries.eu/rest/v2/region/Asia\")\n      .then((response) => response.json())\n      .then((data) =>{\n        const countries = data.map((country) =>(\n          {\n            name: country.name,\n            capital: country.capital,\n            flag: country.flag, \n            region: country.region,\n            subregion: country.subregion, \n            population: country.population, \n            borders: country.borders,\n            languages: country.languages\n          }));\n\n          \n          setCountries(countries);\n      });\n    };\n    getCountriesData();\n  }, []);\n  \n  const refreshCountryData = async () =>{\n    await fetch(\"https://restcountries.eu/rest/v2/region/Asia\")\n    .then((response) => response.json())\n    .then((data) =>{\n      const countries = data.map((country) =>(\n        {\n          name: country.name,\n          capital: country.capital,\n          flag: country.flag, \n          region: country.region,\n          subregion: country.subregion, \n          population: country.population, \n          borders: country.borders,\n          languages: country.languages\n        }));\n        setCountries(countries);\n    });\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"left_side\">\n      {\n              countries.map((country) =>(\n                \n                  <div className=\"country_info_container\">\n                    <div className=\"country_container_img\">\n                     <img className=\"country_img\"  alt={country.flag} src={country.flag}></img>\n                    </div>\n                    <div className=\"country_container_info\">\n                      <h3 className=\"name\">{country.name}</h3>\n                     \n                      <p>{\"Population: \" + country.population}</p>\n                      <p>{\"Region: \" + country.region}</p>\n                      <p>{\"Subregion: \" + country.subregion}</p>\n                      <p>{\"Capital: \" + country.capital}</p>\n                      <p>{\"Population: \" + country.population}</p>\n                      <p>{\"Languages: \"+ country.languages.map(data =>(\n                        (\" \" + data.name)\n                      ))}</p>\n                     \n                     <p>{\"Borders: \" + country.borders}</p>\n                    </div>\n                  </div>\n                \n              ))\n            }\n      </div>\n      <div className=\"right_side\">\n      <Button  variant=\"contained\" color=\"primary\" onChange={refreshCountryData}>\n        SHOW\n      </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}